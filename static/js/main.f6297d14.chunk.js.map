{"version":3,"sources":["services/httpService.js","App.js","serviceWorker.js","index.js"],"names":["axios","interceptors","response","use","error","status","console","log","Promise","reject","httpService","get","post","put","delete","setJwt","jwt","defaults","headers","common","style","height","overflow","colors","InteriorWall","ExteriorWall","Roof","InteriorFloor","Shade","SlabOnGrade","App","sceneSetup","width","_this","el","clientWidth","clientHeight","scene","THREE","camera","up","set","controls","OrbitControls","renderer","alpha","antialias","setSize","appendChild","domElement","lightAmbient","add","lightDirectional","shadow","mapSize","castShadow","axesHelper","readXMLFile","startAnimationLoop","render","requestID","window","requestAnimationFrame","update","handleWindowResize","aspect","updateProjectionMatrix","_callee","_ref2","data","_convert$xml2js","gbXML","regenerator_default","a","wrap","_context","prev","next","http","sent","convert","xml2js","compact","space","addCustomSceneObjects","stop","gb","surfaces","Campus","Surface","polyloops","openings","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","surface","value","_attributes","surfaceType","Opening","PlanarGeometry","polyloop","PolyLoop","points","getPoints","push","arr","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","err","return","remove","campusSurfaces","i","length","material","color","side","opacity","transparent","shape","drawShapeSinglePassObjects","zoomObjectBoundingSphere","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","CartesianPoint","CartesianPointCoordinateArray","Coordinate","map","obj","_text","point","fromArray","vertices","holes","plane","setFromCoplanarPoints","lookAt","normal","obj2","quaternion","copy","clone","conjugate","updateMatrixWorld","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","vertex","localToWorld","autoClose","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","verticesHoles","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","hole","setFromPoints","geometryShape","shapeMesh","position","multiplyScalar","constant","center","radius","geometry","computeBoundingSphere","boundingSphere","bbox","setFromObject","sphere","getBoundingSphere","userData","target","maxDistance","far","scale","this","addEventListener","removeEventListener","cancelAnimationFrame","dispose","_this2","react_default","createElement","ref","Component","Boolean","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6297d14.chunk.js","sourcesContent":["import axios from \"axios\";\r\n//import { toast } from \"react-toastify\";\r\n//import auth from \"./authService\";\r\n\r\naxios.interceptors.response.use(null, error => {\r\n\tconst expectedError =\r\n\t\terror.response &&\r\n\t\terror.response.status >= 400 &&\r\n\t\terror.response.status < 500;\r\n\tif (!expectedError) {\r\n\t\tconsole.log(\"Unexpected error occured.\", error);\r\n\t\t//toast.error(`Unexpected error occured. ${error}`);\r\n\t} else {\r\n\t\tconsole.log(\"Expected error occured.\", error.response);\r\n\t\t//toast.warn(`Expected error occured! ${error.response.status}`);\r\n\t}\r\n\r\n\treturn Promise.reject(error);\r\n});\r\n\r\nexport function setJwt(jwt) {\r\n\taxios.defaults.headers.common[\"x-auth-token\"] = jwt;\r\n}\r\n\r\nexport default {\r\n\tget: axios.get,\r\n\tpost: axios.post,\r\n\tput: axios.put,\r\n\tdelete: axios.delete,\r\n\tsetJwt\r\n};\r\n","import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport http from \"./services/httpService\";\nimport convert from \"xml-js\";\n\nconst style = {\n\theight: \"100vh\", //500 // we can control scene size by setting container dimensions\n\toverflow: \"hidden\"\n};\n\nconst colors = {\n\tInteriorWall: 0x9b4f0f,\n\tExteriorWall: 0x8d230f,\n\tRoof: 0x1e434c,\n\tInteriorFloor: 0x4b7447,\n\t//ExposedFloor: 0x40b4ff,\n\tShade: 0xc99e10,\n\t//UndergroundWall: 0xa55200,\n\t//UndergroundSlab: 0x804000,\n\t//Ceiling: 0xff8080,\n\t//Air: 0xffff00,\n\t//UndergroundCeiling: 0x408080,\n\t//RaisedFloor: 0x4b417d,\n\tSlabOnGrade: 0x8eba43\n\t//FreestandingColumn: 0x808080,\n\t//EmbeddedColumn: 0x80806e\n};\n\nclass App extends Component {\n\tcomponentDidMount() {\n\t\tthis.sceneSetup();\n\t\t//this.addCustomSceneObjects();\n\t\tthis.startAnimationLoop();\n\t\twindow.addEventListener(\"resize\", this.handleWindowResize);\n\t\twindow.addEventListener(\n\t\t\t\"orientationchange\",\n\t\t\tthis.handleWindowResize,\n\t\t\tfalse\n\t\t);\n\t}\n\n\tcomponentWillUnmount() {\n\t\twindow.removeEventListener(\"resize\", this.handleWindowResize);\n\t\twindow.removeEventListener(\n\t\t\t\"orientationchange\",\n\t\t\tthis.handleWindowResize,\n\t\t\tfalse\n\t\t);\n\t\twindow.cancelAnimationFrame(this.requestID);\n\t\tthis.controls.dispose();\n\t}\n\n\tsceneSetup = () => {\n\t\t// get container dimensions and use them for scene sizing\n\t\tconst width = this.el.clientWidth;\n\t\tconst height = this.el.clientHeight;\n\n\t\tthis.scene = new THREE.Scene();\n\t\tthis.camera = new THREE.PerspectiveCamera(\n\t\t\t60, // fov = field of view\n\t\t\twidth / height, // aspect ratio\n\t\t\t1, // near plane\n\t\t\t10000 // far plane\n\t\t);\n\t\tthis.camera.up.set(0, 0, 1);\n\t\t//this.camera.position.z = 5; // is used here to set some distance from a cube that is located at z = 0\n\n\t\t// OrbitControls allow a camera to orbit around the object\n\t\t// https://threejs.org/docs/#examples/controls/OrbitControls\n\t\tthis.controls = new OrbitControls(this.camera, this.el);\n\t\tthis.renderer = new THREE.WebGLRenderer({\n\t\t\talpha: 1,\n\t\t\tantialias: true\n\t\t});\n\t\tthis.renderer.setSize(width, height);\n\t\tthis.el.appendChild(this.renderer.domElement); // mount using React ref\n\n\t\t// Create Global Ambient Light, Light Direction and Light Point\n\t\tthis.lightAmbient = new THREE.AmbientLight(0x444444);\n\t\tthis.scene.add(this.lightAmbient);\n\n\t\tthis.lightDirectional = new THREE.DirectionalLight(0xffffff, 1);\n\t\tthis.lightDirectional.shadow.mapSize.width = 2048; // default 512\n\t\tthis.lightDirectional.shadow.mapSize.height = 2048;\n\t\tthis.lightDirectional.castShadow = true;\n\t\tthis.scene.add(this.lightDirectional);\n\n\t\t// this.lightPoint = new THREE.PointLight(0xffffff, 0.5);\n\t\t// this.lightPoint.position = new THREE.Vector3(0, 0, 1);\n\t\t// this.camera.add(this.lightPoint);\n\t\tthis.scene.add(this.camera);\n\n\t\tthis.axesHelper = new THREE.AxesHelper(50);\n\t\tthis.scene.add(this.axesHelper);\n\n\t\tthis.readXMLFile();\n\t};\n\n\t// Here should come custom code.\n\t// Code below is taken from Three.js BoxGeometry example\n\t// https://threejs.org/docs/#api/en/geometries/BoxGeometry\n\t// addCustomSceneObjects = () => {\n\t// \tconst geometry = new THREE.BoxGeometry(2, 2, 2);\n\t// \tconst material = new THREE.MeshPhongMaterial({\n\t// \t\tcolor: 0x156289,\n\t// \t\temissive: 0x072534,\n\t// \t\tside: THREE.DoubleSide,\n\t// \t\tflatShading: true\n\t// \t});\n\t// \tthis.cube = new THREE.Mesh(geometry, material);\n\t// \tthis.scene.add(this.cube);\n\n\t// \tconst lights = [];\n\t// \tlights[0] = new THREE.PointLight(0xffffff, 1, 0);\n\t// \tlights[1] = new THREE.PointLight(0xffffff, 1, 0);\n\t// \tlights[2] = new THREE.PointLight(0xffffff, 1, 0);\n\n\t// \tlights[0].position.set(0, 200, 0);\n\t// \tlights[1].position.set(100, 200, 100);\n\t// \tlights[2].position.set(-100, -200, -100);\n\n\t// \tthis.scene.add(lights[0]);\n\t// \tthis.scene.add(lights[1]);\n\t// \tthis.scene.add(lights[2]);\n\t// };\n\n\tstartAnimationLoop = () => {\n\t\tthis.renderer.render(this.scene, this.camera);\n\n\t\t// The window.requestAnimationFrame() method tells the browser that you wish to perform\n\t\t// an animation and requests that the browser call a specified function\n\t\t// to update an animation before the next repaint\n\t\tthis.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n\t\tthis.controls.update();\n\t};\n\n\thandleWindowResize = () => {\n\t\tconst width = this.el.clientWidth;\n\t\tconst height = this.el.clientHeight;\n\n\t\tthis.renderer.setSize(width, height);\n\t\tthis.camera.aspect = width / height;\n\n\t\t// Note that after making changes to most of camera properties you have to call\n\t\t// .updateProjectionMatrix for the changes to take effect.\n\t\tthis.camera.updateProjectionMatrix();\n\t};\n\n\treadXMLFile = async () => {\n\t\tconst { data } = await http.get(\"assets/OfficeBuilding.xml\");\n\t\tconst { gbXML } = convert.xml2js(data, { compact: true, space: 4 });\n\t\tthis.addCustomSceneObjects(gbXML);\n\t};\n\n\taddCustomSceneObjects = gb => {\n\t\tconst surfaces = gb.Campus.Surface;\n\n\t\tlet polyloops = [];\n\t\tlet openings = [];\n\n\t\tvar selectedPart = \"InteriorWall\";\n\t\tvar selectedColor = colors.Roof;\n\n\t\tfor (let surface of surfaces) {\n\t\t\tconsole.log(\"surface\", surface);\n\t\t\t//if (surface.surfaceType === selectedPart) {\n\t\t\tconsole.log(surface._attributes.surfaceType);\n\t\t\tif (surface.Opening) {\n\t\t\t\tif (surface.Opening.PlanarGeometry) {\n\t\t\t\t\tconst polyloop = surface.Opening.PlanarGeometry.PolyLoop;\n\t\t\t\t\tconst points = this.getPoints(polyloop);\n\t\t\t\t\topenings.push([points]);\n\t\t\t\t} else {\n\t\t\t\t\tlet arr = [];\n\n\t\t\t\t\tfor (let opening of surface.Opening) {\n\t\t\t\t\t\tconst polyloop = opening.PlanarGeometry.PolyLoop;\n\t\t\t\t\t\tconst points = this.getPoints(polyloop);\n\t\t\t\t\t\tarr.push(points);\n\t\t\t\t\t}\n\n\t\t\t\t\topenings.push(arr);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\topenings.push([]);\n\t\t\t}\n\n\t\t\tconst polyloop = surface.PlanarGeometry.PolyLoop;\n\t\t\tconst points = this.getPoints(polyloop);\n\t\t\tpolyloops.push(points);\n\t\t}\n\t\tthis.scene.remove(this.campusSurfaces);\n\n\t\t// Create Object 3D\n\t\tthis.campusSurfaces = new THREE.Object3D();\n\n\t\tfor (let i = 0; i < polyloops.length; i++) {\n\t\t\tlet material = new THREE.MeshBasicMaterial({\n\t\t\t\tcolor: colors[surfaces[i]._attributes.surfaceType],\n\t\t\t\tside: 2,\n\t\t\t\topacity: 1,\n\t\t\t\ttransparent: true\n\t\t\t});\n\t\t\t// if (surfaces[i].surfaceType !== selectedPart) {\n\t\t\t// \tmaterial = new THREE.MeshBasicMaterial({\n\t\t\t// \t\tcolor: \"#555\", //colors[surfaces[i].surfaceType],\n\t\t\t// \t\tside: 2,\n\t\t\t// \t\topacity: 0.2,\n\t\t\t// \t\ttransparent: true\n\t\t\t// \t});\n\t\t\t// }\n\n\t\t\tconst shape = this.drawShapeSinglePassObjects(\n\t\t\t\tpolyloops[i],\n\t\t\t\tmaterial,\n\t\t\t\topenings[i]\n\t\t\t);\n\t\t\tthis.campusSurfaces.add(shape);\n\t\t}\n\n\t\tthis.scene.add(this.campusSurfaces);\n\n\t\t// Change Camera Zoom and Position to fit Object to Screen\n\t\tthis.zoomObjectBoundingSphere(this.campusSurfaces);\n\t};\n\n\tgetPoints = polyloop => {\n\t\tlet points = [];\n\n\t\tfor (let CartesianPoint of polyloop.CartesianPoint) {\n\t\t\tconst CartesianPointCoordinateArray = CartesianPoint.Coordinate.map(\n\t\t\t\tobj => obj._text\n\t\t\t);\n\t\t\tconst point = new THREE.Vector3().fromArray(\n\t\t\t\tCartesianPointCoordinateArray\n\t\t\t);\n\t\t\tpoints.push(point);\n\t\t}\n\t\treturn points;\n\t};\n\n\tdrawShapeSinglePassObjects = (vertices, material, holes) => {\n\t\tconst plane = new THREE.Plane().setFromCoplanarPoints(\n\t\t\tvertices[0],\n\t\t\tvertices[1],\n\t\t\tvertices[2]\n\t\t);\n\n\t\tconst obj = new THREE.Object3D();\n\t\tobj.lookAt(plane.normal);\n\n\t\tconst obj2 = new THREE.Object3D();\n\t\tobj2.quaternion.copy(obj.clone().quaternion.conjugate());\n\t\tobj2.updateMatrixWorld(true);\n\n\t\tfor (let vertex of vertices) {\n\t\t\tobj2.localToWorld(vertex);\n\t\t}\n\n\t\tconst shape = new THREE.Shape(vertices);\n\n\t\tshape.autoClose = true;\n\n\t\tfor (let verticesHoles of holes) {\n\t\t\tfor (let vertex of verticesHoles) {\n\t\t\t\tobj2.localToWorld(vertex);\n\t\t\t}\n\n\t\t\tconst hole = new THREE.Path();\n\t\t\thole.setFromPoints(verticesHoles);\n\t\t\tshape.holes.push(hole);\n\t\t}\n\n\t\tconst geometryShape = new THREE.ShapeGeometry(shape);\n\n\t\tlet shapeMesh = new THREE.Mesh(geometryShape, material);\n\t\tshapeMesh.quaternion.copy(obj.quaternion);\n\t\tshapeMesh.position.copy(plane.normal.multiplyScalar(-plane.constant));\n\n\t\treturn shapeMesh;\n\t};\n\n\tzoomObjectBoundingSphere = obj => {\n\t\tlet center;\n\t\tlet radius;\n\t\tif (obj.geometry) {\n\t\t\tconsole.log(1);\n\t\t\t// might not be necessary\n\n\t\t\tobj.geometry.computeBoundingSphere();\n\t\t\tcenter = obj.geometry.boundingSphere.center;\n\t\t\tradius = obj.geometry.boundingSphere.radius;\n\t\t} else {\n\t\t\tconsole.log(\"this.campusSurfaces\", this.campusSurfaces);\n\t\t\tconst bbox = new THREE.Box3().setFromObject(this.campusSurfaces);\n\t\t\tconsole.log(\"bbox\", bbox);\n\t\t\tlet sphere = new THREE.Sphere();\n\t\t\tbbox.getBoundingSphere(sphere);\n\t\t\tcenter = sphere.center;\n\t\t\tradius = sphere.radius;\n\t\t}\n\n\t\tobj.userData.center = center;\n\t\tobj.userData.radius = radius;\n\n\t\tthis.controls.target.copy(center);\n\t\tthis.controls.maxDistance = 5 * radius;\n\n\t\tthis.camera.position.copy(\n\t\t\tcenter\n\t\t\t\t.clone()\n\t\t\t\t.add(\n\t\t\t\t\tnew THREE.Vector3(1.0 * radius, -1.0 * radius, 1.0 * radius)\n\t\t\t\t)\n\t\t);\n\t\tthis.axesHelper.position.copy(center);\n\n\t\tthis.camera.far = 10 * radius;\n\t\tthis.camera.updateProjectionMatrix();\n\n\t\tthis.lightDirectional.position.copy(\n\t\t\tcenter\n\t\t\t\t.clone()\n\t\t\t\t.add(\n\t\t\t\t\tnew THREE.Vector3(1.5 * radius, 1.5 * radius, 1.5 * radius)\n\t\t\t\t)\n\t\t);\n\n\t\tthis.lightDirectional.shadow.camera.scale.set(\n\t\t\t0.2 * radius,\n\t\t\t0.2 * radius,\n\t\t\t0.01 * radius\n\t\t);\n\n\t\tthis.lightDirectional.target = this.axesHelper;\n\t};\n\n\trender() {\n\t\treturn <div style={style} ref={ref => (this.el = ref)} />;\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}